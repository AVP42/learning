/**
 *  命令模式  行动模式， 交易模式
 *      0.理解：
 *          0.1 一句话： 将操作或者请求封装到一个对象，从而实现对这个操作或者对象进行排队或者记录日志，
 *                  可以提供命令的撤销和恢复功能
 *          0.2 命令模式就是面向对象形式的回调（callback），一个callback其实就是命令
 *      1. 用意：对命令的封装，将发出命令的责任与执行命令的责任分隔开（不需要直接调用，而是通过invoker），invoker就是解耦引入的中间层
 *      2. 角色：
 *          类比玉帝，创建圣旨，圣旨中封装了一个命令，指定美猴王作为接收者，交给太白金星这个请求者去传达指令，美猴王领到圣旨上天报到。
 *          2.1 客户角色 client：创建具体命令，确定接收者，通过invoker发起请求
 *          2.2 命令角色 command: 抽象命令接口 相当于callback
 *          2.3 具体命令角色 concreteCommand: 封装了execute（执行方法，里面调用接收者的相应操作，相当于callback的方法）
 *          2.4 请求者角色 invoker：调用命令对象的execute方法执行请求（行动方法）
 *          2.5 接受者角色 receiver：具体处理一个请求，调用命令的execute方法（行动方法），任何类都可以是接收者。
 *      3. 是否满足开闭原则
 *      4. 应用场景：
 *          4.1 代替回调（即先注册函数，以后再执行该函数）
 *          4.2 需要在不同时间指定请求，将请求排队
 *          4.3 需要支持命令的undo，redo
 *          4.4 系统崩溃时需要根据日志信息进行恢复
 *          4.5 系统需要支持交易时，交易结构封装了一组命令，使得更容易新增交易类型
 *      5. 具体使用：
 *          5.1 如果命令设计的比较“重”，命令内部就要实现所有的细节，不需要接收者了。因此在一个系统没有接受者的情况下可以使用。
 *      6. 与其他模式关系
 *          6.1 与合成模式：使用合成模式组成合成命令
 *          6.2 与备忘录模式：使用备忘录模式来实现undo，redo
 *                  存储关于命令的效果状态信息。
 *          6.3 与原始模型模式：如果命令有clone方法的话，命令就可以复制
 *      7. 实例：
 *          7.1 redisson中的命令机制
 *          7.2 viomi的processor
 *          7.3 生活例子：
 *              1) 人（client） -> 遥控器(invoker) -> open, play, close -> 电视机
 *              2） 股民（client） -> 股票经纪人（invoker） -> sell out, buy in -> 股市
 *              这里遥控器和经纪人是一种中间人的，有点像代理模式，但是这里的invoker对象不需要实现电视机或者股市相同接口或者继承相同的父类。
 *
 *      8. 优缺点：
 *          优点：请求方拓展新命令很容易；
 *              接收方可以否决，撤销，恢复命令，且方便记录日志；
 *              容易在两者之间设计命队列
 *          缺点：某些系统可能包含成百上千的命令
 *
 */
package info.wufc.learning.design_pattern.command;