/**
 * 责任链模式
 *      0. 理解：
 *          0.1 一句话概述：很多对象由每一个对象对下一个对象的引用而连接起来形成一条链，
 *              请求在该链上传递，直到链上的某个对象决定处理该请求。
 *      1. 用意: 客户端并不知道具体由链上的哪个对象最终处理，因此系统可以在不影响客户端的情况下，
 *                  动态重新组织链或者分配责任。
 *               责任链模式降低的是发出请求的对象与处理请求的对象之间的耦合。允许多个处理者根据自己的逻辑来决定哪个处理者最终处理这个命令
 *      2. 角色：
 *          2.1 抽象处理者 Handler：处理方法和返回下家应用
 *          2.2 具体处理者 ConcreteHandler 处理请求或者将请求传递给下家
 *      3. 是否满足开闭原则
 *      4. 应用：
 *          4.1 有多个处理对象会处理一种请求，而且事先不知道会由哪一个或者那几个对象来处理，这个处理对象需要在运行时动态指定
 *      5. 使用：
 *          5.1 责任链模式的责任链是由客户端创建出来的，责任链模式本身并不创建责任链。
 *          5.2 责任链可以是线，可以是树，可以是图。
 *      6. 与其他模式的关系
 *          6.1 与合成模式：责任链的组织可以由合成模式给出。当责任链模式中的对象链属于一个比较大的机构时，
 *                  这个较大的结构可能即时按照合成模式来构造出来的
 *          6.2 与命令模式：命令模式中一个对象执行特定的命令，这在执行之前就已经明确的。
 *                  而责任链模式，一个特定的请求接收对象对请求或者命令的执行是不确定的，根据其内部逻辑在运行时期确定。
 *          6.3 模版方法模式：当组成责任链的处理者对象是按照合成模式组成一个较大结构的责任组成部分的时候，
 *                  模版方法模式经常用来组织单个对象的行为。
 *      7. 实例:  关键字--“往下/往上 传播”
 *          7.1 类比于类加载器的双亲委派机制
 *          7.2 AWT库中的事件浮升（event bubbling）机制
 *          7.3 官场的责任链
 *      8. 优缺点
 *
 *
 *
 *
 */
package info.wufc.learning.design_pattern.chain_of_responsibility;