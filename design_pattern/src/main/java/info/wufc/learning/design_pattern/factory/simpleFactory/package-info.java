/**
 * 简单工厂模式：
 *  1.角色：不管是退化后或者特殊的简单工厂，都离不开这几个角色，只是有些类可以充当多种角色
 *      1): 工厂角色 Factory：简单工厂模式的核心，通过静态的工厂方法来根据客户端不同的要求来创建不同的产品
 *      2): 抽象产品角色 AbstractProduct：产品的抽象
 *      3): 具体产品角色 ConcreteProduct：具体的产品
 *
 *  2.是否实现开闭原则：即一个系统的设计需要允许系统在不修改的条件下，拓展其功能
 *      从上述的几种角色中，功能的拓展是增加一种具体的产品角色，
 *      1):工厂类由于需要封装判断并创建逻辑，是需要修改的
 *      2):客户消费者这不需要修改
 *      所以，简单工厂模式只能在有限成都支持开闭原则1
 *
 *  3.优缺点与适用条件
 *      优点：实现了对责任的分离；客户端不需要知道产品创建的实现细节，免除了客户端直接创建产品的责任，只负责使用产品即可（即消费产品对象与创建产品对象的责任分离）
 *      缺点：1）: 功能拓展必定会引起工厂类的变动，工厂类是上帝类，变动引起的影响波及大；
 *                  简单工厂模式采用的是以不变应万变，一律使用同一个工厂类（这里的不变指的是同一个类），这种类也被成为God Class上帝类
 *           2）：功能拓展随着逻辑的复杂而难以实现；
 *                  当产品类有复杂的多层次等级结构，不同的产品除了继承同一个抽象产品，还可能实现了不同的接口，
 *                  这样就会使得产品的创建逻辑复杂化，不仅需要考虑实现的接口的判定，还需要根据拓展于抽象成的条件进行判断，多种逻辑糅杂在一起。
 *           3）：工厂角色使用的是静态方法，无法让工厂角色形成继承的等级结构
 *  4.java中的应用：
 *      1）：DateFormat(抽象类也是工厂角色) -> SimpleDateFormat(具体实现)
 *      2）: XMLReaderFactory -> XMLReader
 *  5.与其他模式的关系：
 *      1）：单例模式或多例模式
 *      2）：备忘录模式
 *      3）：MVC架构模式下的controller-> model
 *
 *  *
 */
package info.wufc.learning.design_pattern.factory.simpleFactory;

