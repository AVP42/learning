/**
 * 【对象的行为模式】备忘录模式  快照(snapshot)模式, Token模式
 *      0. 理解：
 *          0.1 一句话概括：使用memento对象将
 *          0.2 备忘录对象memento对象 是用来存储另一个对象内部状态的快照的一种对象，
 *                      一个系统可能存储不止一个状态，这些状态对应了对象在多个不同阶段的快照，
 *                      存放这些快照的memento对象叫做源对象的历史。 一个快照所处的位置叫做检查点(check point)。
 *      1. 用意： 在不破坏封装的条件下，将一个对象的状态捕捉capture，并且外部化externalize，存储起来，
 *              从而可以在将来的合适时候将该对象还原到当时的状态。
 *      2. 角色:
 *          2.1 备忘录角色 memento:
 *              将originator对象的内部状态存储起来
 *              对originator提供宽宽接口，允许originator读取所有的数据，以便恢复
 *              对caretaker或者其他外部对象提供窄接口，只允许将备忘录对象传给其他对象。
 *          2.2 发起人角色 originator：创建备忘录对象，并且保存内部状态；或者使用备忘录对象恢复内部状态
 *          2.3 负责人角色 caretaker：保存备忘录对象，不会修改甚至查看备忘录对象的内容
 *      3. 是否满足开闭
 *      4. 应用场景：
 *      5. 实现：
 *          5.1 利用双接口解决方案--内部类+私有方法 实现备忘录模式的黑箱
 *      6. 与其他模式的关系
 *          6.1 与命令模式
 *              如果涉及到可撤销操作的状态存储，仅仅使用备忘录模式是不够的，应当考虑命令模式
 *              如果使用命令模式时，需要实现命令的可撤销，则命令模式可以使用备忘录模式来存储可撤销操作状态
 *          6.2 与原始模型模式
 *              如果发起人角色支持原始模型模式，则备忘录模式可以使用原始模型模式进行备忘录的创建。
 *          6.3 与迭代子模式
 *              各个检查点的遍历需要使用迭代子模式
 *      7. 实例：
 *           4.1 JDBC与数据库：商业逻辑与存储逻辑分离
 *           4.2 servlet引擎中提供session对象来你不HTTP协议的无状态特定带来的缺点，这就是一种备忘录模式的应用
 *                  网站系统是发起人，session是负责人，存入session中的信息是备忘录角色
 *      8. 优缺点：
 *              优点：简化了发起人，发起人不再需要管理和保存其内部状态的一个个版本。
 *              缺点：资源开销高；状态改变成功不高的情况下，效率较低，不如使用“假如”模式(先尝试能够成功，再真正执行，否则复原）
 *
 */
package info.wufc.learning.design_pattern.memento;