/**
 * 抽象工厂模式：
 *  1.引入的问题：工厂方法只针对一种产品等级结构的，如果需要创建多个产品等级结构的产品，需要多个抽象工厂才能实现，如果这些产品是具有关联性的，是否有更加合理的方式？
 *              抽象工厂模式实现的功能：抽象工厂模式可以给客户端提供一个接口，使得客户只需要指定某个的产品族，由工厂类自动创建该产品族下的多种产品实例
 *  2.角色：
 *      2.1 抽象产品族工厂
 *      2.2 具体产品族工厂
 *      2.3 抽象产品
 *      2.4 具体产品
 *  3.是否实现开闭原则： 以倾斜的方式支持，没有完全支持
 *      功能体现在两方面，产品族（比如宝马 奔驰） 产品结构等级（轮胎 转向系统）
 *          3.1 增加新的产品族(相图纵坐标拓展)，只需要增加具体的产品族工厂实现即可
 *          3.2 增加新的产品结构等级（相图横坐标做账），此时，所有的产品族接口都需要修改
 *  4.抽象工厂模式 工厂方法模式 简单工厂模式的对比：
 *      抽象工厂模式：具体产品族工厂->产品族
 *      工厂方法模式：具体产品工厂->产品
 *      简单工厂模式：上帝工厂->产品
 *  6.优缺点与适用条件
 *      6.1 什么情况下适用：
 *              1）所有创建模式都适用的条件：一个系统不应当依赖产品类实例的创建，组合和表达的细节
 *              2）这个系统有多个产品族，而且系统只消费其中一种产品族
 *              3）同属于于一个产品族的产品是有关联的，一起使用的，需要在设计上提现这点
 *              4）所有创建模式都适用的条件：系统提供产品类的库，所有的产品以接口的方式出现，不依赖于具体实现
 *  7.抽象工厂模式与相关模式
 *      7.1 抽象工厂模式与简单工厂模式1：工厂之工厂1，将抽象工厂与具体实现类通过简单工厂的简化模式进行整合，即在抽象工厂同时也是其子类的工厂
 *      7.2 抽象工厂模式与简单工厂模式2：工厂之工厂2，具体工厂自己作为自己的工厂
 *      7.3 抽象工厂模式与单例模式：将具体工厂作为单例模式来提供自身实例
 *      7.4 抽象工厂模式与工厂方法模式：这里的抽象工厂模式都是通过工厂方法来实现的，因为每一个工厂角色都配有一个工厂方法，在工厂方法中调用产品的构造子
 *      7.5 抽象工厂模式与原始模式：抽象工厂模式可以通过原始模式来实现
 *      7.6 抽象工厂模式与桥梁模式：抽象工厂模式可以为桥梁模式提供某一等级结构的创建功能，两者可以一同使用
 *   8.在java中应用
 *      8.1 AWT组件中的应用 不同系统中的对应不同的产品族
 *
 */
package info.wufc.learning.design_pattern.factory.abstractfactory;