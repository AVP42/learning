/**
 * 建造模式：【结构模式】
 *   1. 用意： 将产品的内部表象与产品的生成过程分隔开，使得可以通过一个建造过程生成具有不同内部表象的产品对象
 *              使得产品的生成过程可以是new关键字创建，也可以是使用前面3中工厂进行创建，
 *              而内部表象则是通过builder来设置的。
 *        > 建造产品过程较为复杂
 *          >> 需要控制性质的设置前后顺序
 *          >> 需要控制性质的设置完整性
 *   2. 实现方式：通过将产品的性质建造过程【外部化】到独立的建造者对象中，并且通过【导演】角色对这些外部化的性质赋值过程进行协调
 *   3. 角色：
 *      3.1 导演角色 Director：构建过程的协调者
 *      3.2 抽象构建角色：规范构建角色的建造
 *      3.3 具体构建角色：
 *      3.4 抽象产品角色：
 *      3.5 具体产品角色：
 *   4. 简化：
 *      4.1 省略抽象构建角色：但只有1类产品时，不需要规范角色
 *      4.2 省略导演角色：因为抽象构建角色省略了，所以屏蔽具体构建角色的导演角色也可以省略，就回到我们常见的builder模式
 *      4.3 合并具体建造者与产品角色：产品自己是自己的建造者 >> 与提供set方法好像一样（自己观点）
 *
 *   5. 与其他模式的关系
 *      5.1 抽象工厂模式：
 *              抽象工厂模式：每次调用都会返回一个完整的对象，在创建方法一般没有对性质构建的复杂逻辑，拿到的不一定是一个完整的产品
 *              建造模式：侧重于通过对性质的一步步组装从而建造出一个复杂的产品，最终拿到的一般是一个完整的产品
 *            >> 建造模式在一个更加宏观的角度，可以利用抽象工厂模式先创建对象，再对对象的性质做进一步的组装
 *      5.3 策略模式：
 *          结构相近，可以理解为策略模式的一种特殊情况；用意不同
 *              策略模式：侧重于对算法的封装
 *              建造模式：侧重于对产品的建造过程
 *      5.4 模版方法：
 *              4.2 简化后的建造模式可以通过利用模版模式来拓展【具体构建者】，进而适应不同组装逻辑的建造者
 *      5.5 适配模式：
 *          如果某个产品没有某个零件，可以利用缺省适配器模式进行空实现
 *      5.6 合成模式：
 *              合成模式：描述一个对象树的组成结构
 *              建造者模式：描述对象树的生成过程
 */
package info.wufc.learning.design_pattern.builder;